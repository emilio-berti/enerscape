library(raster)
dem <- raster("w46585_s10/w46585_s10.tif")
dem
plot(dem)
dem
installed.packages()
installed.packages()[, 1]
names(installed.packages())[1]
colnames(installed.packages())[1]
installed.packages()$Package
installed.packages()
installed.packages()[, 1]
installed.packages(fields = "Package")
colnames(installed.packages())
installed.packages(fields = c("Package", "Version"))
installed.packages(fields = "License")
raster %in% installed.packages()
installed.packages()$Package
installed.packages()
class(installed.packages())
as.data.frame(installed.packages())
as.data.frame(installed.packages())$Package
raster %in% as.data.frame(installed.packages())$Package
as.data.frame(installed.packages())
for (x in "raster") {
if (!require(x, character.only = TRUE)) {
error("Package ", x, "not installed, aborting.")
}
}
for (x in "raste") {
if (!require(x, character.only = TRUE)) {
error("Package ", x, "not installed, aborting.")
}
}
dem_to_slope <- function(r) {
for (x in "raster") {
if (!require(x, character.only = TRUE)) {
stop("Package ", x, "not installed, aborting.")
}
}
}
dem_to_slope <- function(r) {
for (x in "raste") {
if (!require(x, character.only = TRUE)) {
stop("Package ", x, "not installed, aborting.")
}
}
}
dem_to_slope()
require(x, character.only = TRUE)
require(x, character.only = TRUE)
require(x, character.only = TRUE)
require(x, character.only = TRUE)
dem_to_slope <- function(r) {
for (x in "raste") {
if (!require(x, character.only = TRUE, quietly = TRUE)) {
stop("Package ", x, " not installed, aborting.")
}
}
}
dem_to_slope()
dem_to_slope <- function(r) {
for (x in "raste") {
if (!require(x, character.only = TRUE,
quietly = TRUE, warn.conflicts = FALSE)) {
stop("Package ", x, " not installed, aborting.")
}
}
}
dem_to_slope <- function(r) {
for (x in "raste") {
if (!require(x, character.only = TRUE,
quietly = TRUE, warn.conflicts = FALSE)) {
stop("Package ", x, " not installed, aborting.")
}
}
}
dem_to_slope()
require(x, character.only = TRUE)
x <- "rater"
x <- "raster"
require(x, character.only = TRUE)
a <- require(x, character.only = TRUE)
a
inst <- require(x, character.only = TRUE)
!inst
dem_to_slope <- function(r) {
for (x in "raste") {
installed <- require(x, character.only = TRUE)
if (!installed) {
stop("Package ", x, " not installed, aborting.")
}
}
}
dem_to_slope()
require(x, character.only = TRUE)
require(x, character.only = FALSE)
require(x, character.only = TRUE)
dem_to_slope <- function(r) {
for (x in "raste") {
if (!require(x, character.only = TRUE)) {
stop("Package ", x, " not installed, aborting.")
}
}
}
dem
class(dem)
class(dem) == "RasterLayer"
# dem <- raster("w46585_s10/w46585_s10.tif")
plot(dem)
e <- drawExtent()
e
class()
class(e)
dem <- crop(dem, e)
plot(dem)
dem
e
e <- extent(c(880841.3, 887445.7, 4669335,4677260))
dem <- crop(dem, e)
plot(dem)
slope <- raster("w46585_s10/w46585_s10_slope.tif")
slope <- crop(slope, e)
plot(slope)
plot(dem)
plot(slope)
plot(log(dem))
plot(slope)
plot(dem)
plot(log(dem))
plot(log10(dem))
plot(slope, add = TRUE)
plot(slope, add = TRUE, palette = RColorBrewer::brewer.pal(9, "Blues"))
plot(log10(dem))
plot(slope, add = TRUE, col = RColorBrewer::brewer.pal(9, "Blues"))
plot(log10(dem))
slope
min(slope)
median(slope)
mean(slope)
mean(slope$w46585_s10_slope)
median(slope$w46585_s10_slope)
median(values(slope))
mean(values(slope))
slope[slope < 20] <- NA
plot(slope, add = TRUE, col = RColorBrewer::brewer.pal(9, "Blues"))
RColorBrewer::brewer.pal.info
plot(log10(dem), col = RColorBrewer::brewer.pal(0, "Blues"))
plot(log10(dem), col = RColorBrewer::brewer.pal(9, "Blues"))
max(values(slope))
max(values(slope), na.rm = T)
slope[slope < 50] <- NA
plot(slope, add = TRUE, col = RColorBrewer::brewer.pal(9, "Reds"))
dem
dem@file
dem@data
dem@history
dem@z
dem@file
dem@file@driver
dem@file@open
dem@file@name
dem@file@datanotation
raster::filename(dem)
inMemory(dem)
local(dem)
file.info(dem)
file.symlink(dem)
dem@file
remotes::install_github("gearslaboratory/gdalUtils")
for (x in c("raster", "gdalUtils")) {
if (!require(x, character.only = TRUE)) {
stop("Package ", x, " not installed, aborting.")
}
}
gdalUtils::gdaldem("slope", dem, slope)
gdalUtils::gdaldem("slope", dem, slope)
gdalUtils::gdaldem("slope", dem, file.path("w46585_s10", "slope"))
file.path("w46585_s10", "slope.tif")
gdalUtils::gdaldem("slope", dem, file.path("w46585_s10", "slope.tif"))
gdalUtils::gdaldem("slope", dem, file.path("w46585_s10", "slope.tif"),
output_Raster = TRUE, verbose = TRUE)
dem
gdalUtils::gdaldem("slope",
file.path("w46585_s10", "w46585_s10.tif"),
file.path("w46585_s10", "slope.tif"),
output_Raster = TRUE, verbose = TRUE)
slope2 <- gdalUtils::gdaldem("slope",
file.path("w46585_s10", "w46585_s10.tif"),
file.path("w46585_s10", "slope.tif"),
output_Raster = TRUE, verbose = TRUE)
slope2 <- crop(slope2, e)
plot(slope)
slope <- raster("w46585_s10/w46585_s10_slope.tif")
e <- extent(c(880841.3, 887445.7, 4669335,4677260))
slope <- crop(slope, e)
plot(slope)
plot(slope2)
slope - slope2
# this is a wrapper to gdal slope input output
slope <- gdalUtils::gdaldem("slope",
file.path("w46585_s10", "w46585_s10.tif"),
file.path("w46585_s10", "slope.tif"),
output_Raster = TRUE, verbose = TRUE)
# this is a wrapper to gdal slope input output
slope <- gdalUtils::gdaldem("slope",
file.path("w46585_s10", "w46585_s10.tif"),
output_Raster = TRUE, verbose = TRUE)
dem <- raster("w46585_s10/w46585_s10.tif")
dem_file <- "w46585_s10/w46585_s10.tif"
slope_output <- "w46585_s10/w46585_s10_slope.tif"
gdalUtils::gdaldem("slope",
dem_file,
slope_file,
output_Raster = TRUE,
verbose = TRUE)
gdalUtils::gdaldem("slope",
dem_file,
slope_output,
output_Raster = TRUE,
verbose = TRUE)
slope <- gdalUtils::gdaldem("slope",
dem_file,
slope_output,
output_Raster = TRUE,
verbose = TRUE)
dem <- raster("w46585_s10/w46585_s10.tif")
slope <- raster("w46585_s10/w46585_s10_slope.tif")
e <- extent(c(880841.3, 887445.7, 4669335,4677260))
dem <- crop(dem, e)
slope <- crop(slope, e)
plot(log10(dem), col = RColorBrewer::brewer.pal(9, "Blues"))
slope[slope < 50] <- NA
plot(slope, add = TRUE, col = RColorBrewer::brewer.pal(9, "Reds"))
dem_file <- "w46585_s10/w46585_s10.tif"
slope_output <- "w46585_s10/w46585_s10_slope.tif"
slope <- dem_to_slope(dem_file, slope_output)
source("R/dem_to_slope.R")
slope <- dem_to_slope(dem_file, slope_output)
plot(slope)
slope <- crop(slope, r)
slope <- crop(slope, e)
plot(slope)
slope
sin(slope)
?sin
sin(slope)
pot(sin(slope))
plot(sin(slope))
plot(slope)
a <- slope
a <- aggregate(a, 100)
a
plot(a)
sin(a)
plot(sin(a))
sin(a)
slope
sin(a)
slope
sin(76)
sin(0.07)
a
calc(a, fun = function(x) {sin(x)})
sin(x)
sin(a)
calc(a, fun = function(x) {sin(x)})
a
min(a, na.rm = T)
min(a, na.rm = F)
min(values(a), na.rm = T)
min(values(a), na.rm = F)
min(values(a), na.rm = T)
sin(min(values(a), na.rm = T))
sin(max(values(a), na.rm = T))
a
max(a)
max(values(a))
sin(37)
?sin
sin(90)
sinpi(90)
sinpi(0)
sin(52.517 * a)
sin(a)
(52.517 * a)
sin(a / 52.517)
(a / 52.517)
sin(90 / 52.517)
sin(0.01745329 * 90)
W <- m * g * sin(0.01745329 * slope) #radians
(a * 0.01745329)
sin(a * 0.01745329)
slope
m <- 1
enerscape <- function(slope, m) {
g <- 9.80665
W <- m * g * sin(0.01745329 * slope) #radians
return(W)
}
enerscape(slope, 1)
enerscape(slope, 2)
for (x in seq_len(4))
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
plot(enerscape(slope, x))
}
x
enerscape(slope, x)
enerscape(slope, 100)
a <- enerscape(slope, 100)
b <- enerscape(slope, 1000)
a / b
enerscape <- function(slope, m) {
g <- 9.80665
eff <- m ^ 0.15
W <- m * g * sin(0.01745329 * slope) * eff #radians
return(W)
}
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
plot(enerscape(slope, x))
}
b <- enerscape(slope, 1000)
a <- enerscape(slope, 100)
a / b
dev.off()
plot(a - b)
plot(b - a)
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r <= 0] <- NA
plot()
}
x
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r <= 0] <- NA
plot()
}
x
enerscape <- function(slope, m) {
g <- 9.80665 #gravitational pull
eff <- m ^ 0.15 #efficiency of locomotion - filler, to be determined
h <- sin(0.01745329 * slope) #0.01745329 = degrees to radians conversion
W <- m * g * h * eff #work (Joule)
return(W)
}
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r <= 0] <- NA
plot()
}
enerscape(slope, x)
r <- enerscape(slope, x)
r
r[r <= 0] <- NA
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r <= 0] <- NA
plot(r)
}
enerscape <- function(slope, m) {
g <- 9.80665 #gravitational pull
eff <- 0.0005 * m ^ 0.15 #efficiency of locomotion - filler, to be determined
h <- sin(0.01745329 * slope) #0.01745329 = degrees to radians conversion
W <- m * g * h * eff #work (Joule)
return(W)
}
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r <= 0] <- NA
plot(r)
}
enerscape(slope, x)
enerscape(slope, x) * 0.0005
enerscape <- function(slope, m) {
g <- 9.80665 #gravitational pull
eff <- 0.0005 * m ^ 0.15 #efficiency of locomotion - filler, to be determined
h <- sin(0.01745329 * slope) #0.01745329 = degrees to radians conversion
W <- m * g * h * eff #work (Joule)
return(W)
}
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r <= 0] <- NA
plot(r)
}
enerscape(slope, x)
enerscape <- function(slope, m) {
g <- 9.80665 #gravitational pull
eff <- 10^-8 * m ^ 0.15 #efficiency of locomotion - filler, to be determined
h <- sin(0.01745329 * slope) #0.01745329 = degrees to radians conversion
W <- m * g * h * eff #work (Joule)
return(W)
}
enerscape(slope, x)
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r <= 0] <- NA
plot(r)
}
r <- enerscape(slope, x)
r
sum(values(r) > 0)
sum(values(r) < 0)
sum(values(r) <- 0)
values(r)
enerscape <- function(slope, m) {
g <- 9.80665 #gravitational pull
eff <- 10^-8 * m ^ 0.15 #efficiency of locomotion - filler, to be determined
h <- sin(0.01745329 * slope) #0.01745329 = degrees to radians conversion
W <- m * g * h * eff #work (Joule)
return(W)
}
r <- enerscape(slope, x)
r
enerscape <- function(slope, m) {
g <- 9.80665 #gravitational pull
eff <- 10^-10 * m ^ 0.15 #efficiency of locomotion - filler, to be determined
h <- sin(0.01745329 * slope) #0.01745329 = degrees to radians conversion
W <- m * g * h * eff #work (Joule)
return(W)
}
enerscape(slope, x)
enerscape <- function(slope, m) {
g <- 9.80665 #gravitational pull
eff <- m ^ 0.15 #efficiency of locomotion - filler, to be determined
h <- sin(0.01745329 * slope) #0.01745329 = degrees to radians conversion
W <- m * g * h * eff #work (Joule)
return(W)
}
enerscape(slope, x)
enerscape(slope, 10)
enerscape(slope, x)
par(mfrow = c(2, 2))
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r >= x] <- NA
plot(r)
}
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r >= x / 2] <- NA
plot(r)
}
par(mfrow = c(2, 2))
for (x in 10^seq_len(4)) {
r <- enerscape(slope, x)
r[r >= x * 10] <- NA
plot(r)
}
dem_file <- "w46585_s10/w46585_s10.tif"
slope_output <- "w46585_s10/w46585_s10_slope.tif"
library(rasterVis)
dem
dem <- raster("w46585_s10/w46585_s10.tif")
slope <- raster("w46585_s10/w46585_s10_slope.tif")
plot(dem)
levelplot(dem)
levelplot(slope, col.resiond = "palegreen")
levelplot(slope, col.regions = "palegreen")
levelplot(slope, col.regions = c('palegreen', 'midnightblue', 'indianred1'))
levelplot(slope, col.regions = RColorBrewer::brewer.pal(9, "Reds"))
levelplot(slope, col.regions = RColorBrewer::brewer.pal(20, "Reds"))
levelplot(slope, col = "red")
levelplot(slope, at = seq(min(slope, max(slope), lengh.out = 9)) col.regions = RColorBrewer::brewer.pal(9, "Reds"))
levelplot(slope, at = seq(min(slope, max(slope), lengh.out = 9)), col.regions = RColorBrewer::brewer.pal(9, "Reds"))
